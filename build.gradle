buildscript {
	ext {
		springBootVersion = '1.4.2.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
	}
}

plugins {
    id "io.spring.dependency-management" version "0.6.0.RELEASE"
    id "org.asciidoctor.convert" version "1.5.2"
    id "org.sonarqube" version "2.0.1"
}

/* Above plugin is used to override default version in spring boot */
ext['thymeleaf.version'] = '3.0.2.RELEASE'
ext['thymeleaf-extras-springsecurity4.version'] = '3.0.0.RELEASE'
ext['thymeleaf-layout-dialect.version'] = '2.1.1'

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'findbugs'
apply plugin: 'io.spring.dependency-management'


war {
	baseName = 'securedthymeleafcart'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

configurations {
	providedRuntime
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-redis')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.boot:spring-boot-devtools')
	compile('org.springframework.boot:spring-boot-starter-hateoas')
	compile('org.projectlombok:lombok')
        //Added pool jar to create redis pool by default
    compile group: 'org.apache.commons', name: 'commons-pool2'
    /* WebJars Dependencies*/
    compile('org.webjars:webjars-locator')
    compile group: 'org.webjars', name: 'bootstrap', version: '3.3.6'
    compile group: 'org.webjars', name: 'jquery', version: '2.2.4'
    /* WebJars Dependencies*/
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.session:spring-session')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4')
	compile('org.springframework.boot:spring-boot-starter-web')
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	testCompile('org.springframework.boot:spring-boot-starter-test') 
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
	testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
	testCompile group: 'com.icegreen', name: 'greenmail', version: '1.5.2'
	
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/xsl/findbugs-custom.xsl')
    }
}

bootRun {
    addResources = true
}

bootRepackage {
    mainClass = 'com.learning.securedapp.Application'
    excludeDevtools = true
}

task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
  }

/* Asking JUNIT to generate reports */
test {
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
    reports {
                junitXml.enabled = false
                html.enabled = true
        }
}

ext {
    snippetsDir = file('build/generated-snippets')
}

sonarqube {
    properties {
        property "sonar.exclusions", "**/*Test.java"
        property "sonar.sourceEncoding", "UTF-8"
    }
}

test {
    outputs.dir snippetsDir
}


asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    outputDir "build/asciidoc"
    dependsOn test
    sourceDir 'src/main/asciidoc'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}